
const { input, select } = require('@inquirer/prompts');


const fs = require('fs'); 
const path = require('path');


const caminhoMusicas = path.join(__dirname, 'musicas.json');
const caminhoPlaylists = path.join(__dirname, 'playlists.json');


function lerJSON(caminho) {
    if (!fs.existsSync(caminho)) {
        fs.writeFileSync(caminho, '[]', 'utf8');
    }
    return JSON.parse(fs.readFileSync(caminho, 'utf8'));
}


function salvarJSON(caminho, dados) {
    fs.writeFileSync(caminho, JSON.stringify(dados, null, 2), 'utf8');
}

// === Carregamento inicial dos dados ===
// Carrega os dados salvos anteriormente, se existirem
let musicas = lerJSON(caminhoMusicas);
let playlists = lerJSON(caminhoPlaylists);

// Exibe o t√≠tulo inicial do programa
console.log("=== üéµ Gerenciador de M√∫sicas ===");
menu(); // Inicia o menu principal

// === Fun√ß√£o principal do menu ===
async function menu() {
    while (true) { // Loop infinito at√© o usu√°rio escolher "Sair"
        const opcao = await select({
            message: "Escolha uma op√ß√£o:",
            choices: [
                { name: "Cadastrar M√∫sica", value: "cadastrarMusica" },
                { name: "Criar Playlist", value: "criarPlaylist" },
                { name: "Adicionar M√∫sica √† Playlist", value: "adicionarMusicaPlaylist" },
                { name: "Marcar M√∫sica como Favorita", value: "marcarFavorita" },
                { name: "Avaliar M√∫sica", value: "avaliarMusica" },
                { name: "Mostrar Estat√≠sticas", value: "estatisticas" },
                { name: "Mostrar Tabelas", value: "tabelas" },
                { name: "Sair", value: "sair" }
            ]
        });

        // Escolhe a a√ß√£o com base na op√ß√£o selecionada
        switch (opcao) {
            case "cadastrarMusica": await cadastrarMusica(); break;
            case "criarPlaylist": await criarPlaylist(); break;
            case "adicionarMusicaPlaylist": await adicionarMusicaPlaylist(); break;
            case "marcarFavorita": await marcarFavorita(); break;
            case "avaliarMusica": await avaliarMusica(); break;
            case "estatisticas":
                console.log("\nüìä Estat√≠sticas:");
                console.log("G√™nero favorito:", generoFavorito());
                console.log("Artista mais ouvido:", artistaMaisOuvido());
                console.log("M√∫sicas recentes (7 dias):", musicasRecentes().map(m => m.titulo).join(", ") || "Nenhuma");
                break;
            case "tabelas": mostrarTabelas(); break;
            case "sair":
                // Ao sair, limpa o console e salva os dados antes de encerrar o programa
                limparConsole();
                console.log("üíæ Salvando dados...");
                salvarJSON(caminhoMusicas, musicas);
                salvarJSON(caminhoPlaylists, playlists);
                console.log("üëã At√© a pr√≥xima!");
                process.exit(); // Encerra o programa
        }
    }
}

// === Fun√ß√£o de limpar o console ===
// Apenas limpa a tela do terminal
function limparConsole() {
    console.clear();
}

// === Fun√ß√µes auxiliares ===
// Gera um novo ID automaticamente com base no √∫ltimo item da lista
function gerarId(array) {
    return array.length > 0 ? array[array.length - 1].id + 1 : 1;
}

// === CRUD de M√∫sicas e Playlists ===

// Fun√ß√£o para cadastrar uma nova m√∫sica
async function cadastrarMusica() {
    // Permite escolher entre cadastrar ou voltar ao menu
    const opcao = await select({
        message: "Deseja cadastrar uma nova m√∫sica ou voltar?",
        choices: [
            { name: "Cadastrar nova m√∫sica", value: "continuar" },
            { name: "Voltar", value: "voltar" }
        ]
    });
    if (opcao === "voltar") return; // Retorna ao menu principal

    // Coleta os dados da nova m√∫sica
    const titulo = await input({ message: "Nome da m√∫sica:" });
    const artista = await input({ message: "Artista:" });
    const album = await input({ message: "√Ålbum:" });
    const genero = await input({ message: "G√™nero:" });
    const duracao = parseInt(await input({ message: "Dura√ß√£o:" }));
    const ano = parseInt(await input({ message: "Ano de lan√ßamento:" }));

    // Cria o objeto da nova m√∫sica
    const musica = {
        id: gerarId(musicas),
        titulo,
        artista,
        album,
        genero,
        duracao,
        ano,
        favorita: false,
        avaliacao: 0,
        dataAdicao: new Date().toISOString().split('T')[0] // Data atual
    };

    // Adiciona √† lista e salva no arquivo JSON
    musicas.push(musica);
    salvarJSON(caminhoMusicas, musicas);
    console.log("‚úÖ M√∫sica cadastrada com sucesso!");
}

// Cria uma nova playlist
async function criarPlaylist() {
    const opcao = await select({
        message: "Deseja criar uma nova playlist ou voltar?",
        choices: [
            { name: "Criar nova playlist", value: "continuar" },
            { name: "Voltar", value: "voltar" }
        ]
    });
    if (opcao === "voltar") return;

    // Pede nome e descri√ß√£o da playlist
    const nome = await input({ message: "Nome da playlist:" });
    const descricao = await input({ message: "Descri√ß√£o:" });

    // Cria o objeto da playlist
    const playlist = {
        id: gerarId(playlists),
        nome,
        descricao,
        musicas: [],
        dataCriacao: new Date().toISOString().split('T')[0]
    };

    // Adiciona e salva
    playlists.push(playlist);
    salvarJSON(caminhoPlaylists, playlists);
    console.log("‚úÖ Playlist criada com sucesso!");
}

// Adiciona uma m√∫sica a uma playlist existente
async function adicionarMusicaPlaylist() {
    if (playlists.length === 0 || musicas.length === 0) {
        console.log("‚ö†Ô∏è  Cadastre pelo menos uma m√∫sica e uma playlist primeiro!");
        return;
    }

    const opcao = await select({
        message: "Deseja adicionar uma m√∫sica ou voltar?",
        choices: [
            { name: "Adicionar m√∫sica", value: "continuar" },
            { name: "Voltar", value: "voltar" }
        ]
    });
    if (opcao === "voltar") return;

    // Seleciona a playlist
    const playlistEscolhida = await select({
        message: "Selecione a playlist:",
        choices: playlists.map(p => ({ name: p.nome, value: p.id }))
    });

    // Seleciona a m√∫sica
    const musicaEscolhida = await select({
        message: "Selecione a m√∫sica para adicionar:",
        choices: musicas.map(m => ({ name: `${m.titulo} - ${m.artista}`, value: m.id }))
    });

    // Adiciona a m√∫sica √† playlist e salva
    const playlist = playlists.find(p => p.id === playlistEscolhida);
    playlist.musicas.push(musicaEscolhida);
    salvarJSON(caminhoPlaylists, playlists);
    console.log("‚úÖ M√∫sica adicionada √† playlist!");
}

// Marca uma m√∫sica como favorita
async function marcarFavorita() {
    if (musicas.length === 0) return console.log("‚ö†Ô∏è Nenhuma m√∫sica cadastrada.");

    const opcao = await select({
        message: "Deseja marcar uma favorita ou voltar?",
        choices: [
            { name: "Marcar favorita", value: "continuar" },
            { name: "Voltar", value: "voltar" }
        ]
    });
    if (opcao === "voltar") return;

    // Seleciona qual m√∫sica ser√° marcada
    const musicaEscolhida = await select({
        message: "Selecione a m√∫sica:",
        choices: musicas.map(m => ({ name: `${m.titulo} - ${m.artista}`, value: m.id }))
    });

    const musica = musicas.find(m => m.id === musicaEscolhida);
    musica.favorita = true;
    salvarJSON(caminhoMusicas, musicas);
    console.log("‚≠ê M√∫sica marcada como favorita!");
}

// Permite avaliar uma m√∫sica com nota de 1 a 5
async function avaliarMusica() {
    if (musicas.length === 0) return console.log("‚ö†Ô∏è Nenhuma m√∫sica cadastrada.");

    const opcao = await select({
        message: "Deseja avaliar uma m√∫sica ou voltar?",
        choices: [
            { name: "Avaliar m√∫sica", value: "continuar" },
            { name: "Voltar", value: "voltar" }
        ]
    });
    if (opcao === "voltar") return;

    const musicaEscolhida = await select({
        message: "Selecione a m√∫sica para avaliar:",
        choices: musicas.map(m => ({ name: `${m.titulo} - ${m.artista}`, value: m.id }))
    });

    const avaliacao = parseInt(await input({ message: "Avalia√ß√£o (1-5):" }));
    if (avaliacao < 1 || avaliacao > 5) return console.log("‚ùå Avalia√ß√£o inv√°lida!");

    const musica = musicas.find(m => m.id === musicaEscolhida);
    musica.avaliacao = avaliacao;
    salvarJSON(caminhoMusicas, musicas);
    console.log("‚úÖ M√∫sica avaliada!");
}

// === Estat√≠sticas ===

// Calcula qual g√™nero aparece mais nas m√∫sicas
function generoFavorito() {
    const contador = {};
    musicas.forEach(m => contador[m.genero] = (contador[m.genero] || 0) + 1);
    const favorito = Object.keys(contador).reduce((a, b) => contador[a] > contador[b] ? a : b, null);
    return favorito || "Nenhum";
}

// Descobre qual artista tem mais m√∫sicas cadastradas
function artistaMaisOuvido() {
    const contador = {};
    musicas.forEach(m => contador[m.artista] = (contador[m.artista] || 0) + 1);
    const favorito = Object.keys(contador).reduce((a, b) => contador[a] > contador[b] ? a : b, null);
    return favorito || "Nenhum";
}

// Lista as m√∫sicas adicionadas recentemente (nos √∫ltimos N dias)
function musicasRecentes(dias = 7) {
    const hoje = new Date();
    return musicas.filter(m => {
        const dataAdicao = new Date(m.dataAdicao);
        return (hoje - dataAdicao) / (1000 * 60 * 60 * 24) <= dias;
    });
}

// === Visualiza√ß√£o ===
// Exibe m√∫sicas e playlists em formato de tabela no console
function mostrarTabelas() {
    console.log("\nüéµ M√∫sicas:");
    console.table(musicas.map(m => ({
        ID: m.id,
        T√≠tulo: m.titulo,
        Artista: m.artista,
        √Ålbum: m.album,
        G√™nero: m.genero,
        Dura√ß√£o: m.duracao,
        Ano: m.ano,
        Favorita: m.favorita ? "‚≠ê" : "",
        Avalia√ß√£o: m.avaliacao
    })));

    console.log("\nüìÇ Playlists:");
    console.table(playlists.map(p => ({
        ID: p.id,
        Nome: p.nome,
        Descri√ß√£o: p.descricao,
        M√∫sicas: p.musicas.map(id => musicas.find(m => m.id === id)?.titulo).join(", "),
        CriadaEm: p.dataCriacao
    })));
}
